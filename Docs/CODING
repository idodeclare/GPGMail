Every Mail.app method which is to be swizzled, has to be prefixed
with MA (MailApp).

There's a folder in Resources which is called old. This folder
is used to diff the a modified xib with the latest xib.
It's used for localizeXIB. 
DON'T EVER DELETE THIS FOLDER!

* Reverse Engineering *

- Sometimes it's not to easy to find out what happens to an
  object you created. In that case you can over release it,
  using autorelease or release. This way, the object will be
  ending up an NSZombie, which can later be tracked using Instruments
  allocation tool. (VERY HELPFUL)

- clearCachedDecrypted is called everytime the message is unlodaed.
  we should better cache it.

- Mail internally seems to use firstChildPart to determine the charset of the message.

- Log all messages -> instrumentObjcMessageSends(YES) writes to  /tmp/msgSends-

_getSomeCharsetFromPartTree -> exists only internally

- -[Message setNumberOfAttachments:isSigned:isEncrypted:] is only called for
  encrypted messages, strangely enough.
  Still have to find out what usually sets the number.
  Mail.app uses -[MessageStore setNumberOfAttachments:isSigned:isEncrypted:forMessage:] to set the number
  of attachments for every message, but this is only called when the message comes in
  and never touched again, except for encrypted messages.
  
  So to always work, GPGMail forces Mail.app to update the number for every message, each time
  it's parsed or the number is different, by recalculating the number.

* Committing *

- Always use git -p <filename>. This let's you decide for each file
  what lines should be added to a commit.
- Use this to create commits which only fix one problem at a time.

* Other *

- Mail.app comes with a lot of general class enhancements. It's best to look
  them through to find helpful ones.
  
  @interface NSData (MessageAdditions)
  - (id)initWithDataConvertingLineEndingsFromUnixToNetwork:(id)arg1;
  - (id)initWithDataConvertingLineEndingsFromNetworkToUnix:(id)arg1;
  - (id)dataByConvertingLineEndingsFromUnixToNetwork;
  
  // To detect if the data contains real message headers.
  - (struct _NSRange)rangeOfRFC822HeaderData;

* Data Detectors *

- Extremely hard to implement native ones.
- Enabling Javascript in WebViews works
  [[WebView preferences] setJavaScriptEnabled:YES]
- Using Javascript to emulate the bevaiour might be rather easy.

* Mountain Lion *

- MimePart, MimeBody and other very important classes from Message.framework
  are now in CoreMessage.framework
- MessageStore does no longer exist but was replaced by MessageDataSource.
- On Mountain Lion compiled GPGMail doesn't load, where on Lion compiled GPGMail loads
  - Check Framework dependencies.
  - Update Header files for Mountain Lion

* OpenPGP | S/MIME co-existence

1.) A new message (not reply) is created check if the there's a key for signing
    for the address in either OpenPGP or S/MIME. Choose the method to enable accordingly.
    
    If there are keys for either method, check the entries which method was last used
    to sign with this key.
    
    If again both methods are found check which was used more often.
    
    Once a user changes the method manually, NEVER automatically manipulate that
    choice again.

    [ComposeBackEnd type] defines whether the message is replied|forwared|replied-to-all|new
        - 5 -> New message
        - 1 -> Reply
        - 2 -> Reply to all
        - 3 -> Forward
        - 4 -> Reply to already open mesage? (Mail.app was closed with this reply open and it's restored.)
    
    once a user enters addresses a dictionary is checked to see if the last time
    the user sent to these addresses decided to encrypt or not and sets that status. 
    If no message was sent yet to that user, don't encrypt.
    
    If there's one key for signing for each method but the recipients can only be found for one encryption method
    automatically select that encryption method.
    
    If a user replies to a message, check if the message was signed and set signed.
    If a user replies to a message, check if the message was encrypted and set encrypted.
    Don't set something which the old message was not.

    User defaults should look like this
    [address][sign][SMIME][addresses][did-sign] = counter
    [address][sign][PGP][addresses][did-not-sign] = counter
    [address][sign][addresses][last-used-method] = 'SMIME' | 'PGP'
    [address][sign][addresses][last-status] = 'did sign' | 'did not sign'
    [address][encrypt][SMIME][addresses][did-encrypt] = counter
    [address][encrypt][PGP][addresses][did-not-encrypt] = counter
    [address][encrypt][addresses][last-used-method] = 'SMIME' | 'PGP'
    [address][encrypt][addresses][last-status] = 'did encrypt' | 'did not encrypt'

